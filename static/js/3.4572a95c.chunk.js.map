{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["input","props","inputElement","inputClasses","styles","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","React","createElement","Object","assign","onChange","changed","className","join","elementConfig","value","options","map","option","key","displayValue","Input","Label","label","module","exports","checkoutSummary","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCanceled","checkoutContinued","connect","state","ings","burgerBuilder","price","totalPrice","loading","order","token","auth","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","_useState","useState","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","_useState2","_slicedToArray","orderForm","setOrderForm","_useState3","_useState4","formIsValid","setFormIsValid","formElementsArray","id","config","form","onSubmit","event","preventDefault","formData","formElementIdentifier","formElement","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","_defineProperty","inputChangedHandler","disabled","Spinner","ContactData","axios","purchased","Redirect","purchasedRedirect","to","checkoutCancelled","history","goBack","replace","Route","path","match","component"],"mappings":"wHAAA,sCAiEeA,IA9DD,SAACC,GACb,IAAIC,EAAe,KACbC,EAAe,CAACC,IAAOC,cAM7B,OAJIJ,EAAMK,SAAWL,EAAMM,gBAAkBN,EAAMO,SACjDL,EAAaM,KAAKL,IAAOM,SAGnBT,EAAMU,aACZ,IAAK,QACHT,EACEU,IAAAC,cAAA,QAAAC,OAAAC,OAAA,CACEC,SAAUf,EAAMgB,QAChBC,UAAWf,EAAagB,KAAK,MACzBlB,EAAMmB,cAAa,CACvBC,MAAOpB,EAAMoB,SAGjB,MACF,IAAK,WACHnB,EACEU,IAAAC,cAAA,WAAAC,OAAAC,OAAA,CACEC,SAAUf,EAAMgB,QAChBC,UAAWf,EAAagB,KAAK,MACzBlB,EAAMmB,cAAa,CACvBC,MAAOpB,EAAMoB,SAGjB,MACF,IAAK,SACHnB,EACEU,IAAAC,cAAA,UACEG,SAAUf,EAAMgB,QAChBC,UAAWf,EAAagB,KAAK,KAC7BE,MAAOpB,EAAMoB,OAEZpB,EAAMmB,cAAcE,QAAQC,KAAI,SAACC,GAAM,OACtCZ,IAAAC,cAAA,UAAQY,IAAKD,EAAOH,MAAOA,MAAOG,EAAOH,OACtCG,EAAOE,kBAKhB,MACF,QACExB,EACEU,IAAAC,cAAA,QAAAC,OAAAC,OAAA,CACEC,SAAUf,EAAMgB,QAChBC,UAAWd,IAAOC,cACdJ,EAAMmB,cAAa,CACvBC,MAAOpB,EAAMoB,SAIrB,OACET,IAAAC,cAAA,OAAKK,UAAWd,IAAOuB,OACrBf,IAAAC,cAAA,SAAOK,UAAWd,IAAOwB,OAAQ3B,EAAM4B,OACtC3B,K,oBC3DP4B,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU,yB,oBCAjID,EAAOC,QAAU,CAAC,gBAAkB,2C,oBCApCD,EAAOC,QAAU,CAAC,YAAc,mC,6GCiBjBC,EAbS,SAAC/B,GACrB,OACIW,IAAAC,cAAA,OAAKK,UAAWd,IAAO6B,iBACnBrB,IAAAC,cAAA,UAAI,2BACJD,IAAAC,cAAA,OAAKqB,MAAO,CAACC,MAAO,OAAQC,OAAQ,SAChCxB,IAAAC,cAACwB,IAAM,CAACC,YAAarC,EAAMqC,eAE/B1B,IAAAC,cAAC0B,IAAM,CAACC,QAAQ,SAASC,QAASxC,EAAMyC,kBAAkB,UAC1D9B,IAAAC,cAAC0B,IAAM,CAACC,QAAQ,UAAUC,QAASxC,EAAM0C,mBAAmB,c,kFC0LzDC,eAjBS,SAACC,GACvB,MAAO,CACLC,KAAMD,EAAME,cAAcT,YAC1BU,MAAOH,EAAME,cAAcE,WAC3BC,QAASL,EAAMM,MAAMD,QACrBE,MAAOP,EAAMQ,KAAKD,MAClBE,OAAQT,EAAMQ,KAAKC,WAII,SAACC,GAC1B,MAAO,CACLC,cAAe,SAACC,EAAWL,GAAK,OAC9BG,EAASG,IAAuBD,EAAWL,QAIlCR,CAGbe,aA9LkB,SAAA1D,GAClB,IAAA2D,EAAkCC,mBAAS,CACvCC,KAAM,CACJnD,YAAa,QACbS,cAAe,CACb2C,KAAM,OACNC,YAAa,aAEf3C,MAAO,GACP4C,WAAY,CACVC,UAAU,GAEZC,OAAO,EACP3D,SAAS,GAEX4D,OAAQ,CACNzD,YAAa,QACbS,cAAe,CACb2C,KAAM,OACNC,YAAa,UAEf3C,MAAO,GACP4C,WAAY,CACVC,UAAU,GAEZC,OAAO,EACP3D,SAAS,GAEX6D,QAAS,CACP1D,YAAa,QACbS,cAAe,CACb2C,KAAM,OACNC,YAAa,YAEf3C,MAAO,GACP4C,WAAY,CACVC,UAAU,EACVI,UAAW,EACXC,UAAW,EACXC,WAAW,GAEbL,OAAO,EACP3D,SAAS,GAEXiE,QAAS,CACP9D,YAAa,QACbS,cAAe,CACb2C,KAAM,OACNC,YAAa,WAEf3C,MAAO,GACP4C,WAAY,CACVC,UAAU,GAEZC,OAAO,EACP3D,SAAS,GAEXkE,MAAO,CACL/D,YAAa,QACbS,cAAe,CACb2C,KAAM,QACNC,YAAa,eAEf3C,MAAO,GACP4C,WAAY,CACVC,UAAU,EACVS,SAAS,GAEXR,OAAO,EACP3D,SAAS,GAEXoE,eAAgB,CACdjE,YAAa,SACbS,cAAe,CACbE,QAAS,CACP,CAAED,MAAO,UAAWK,aAAc,WAClC,CAAEL,MAAO,WAAYK,aAAc,cAGvCL,MAAO,UACP4C,WAAY,GACZE,OAAO,KAETU,EAAAC,YAAAlB,EAAA,GAlFGmB,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAoF9BI,EAAsCpB,oBAAS,GAAMqB,EAAAJ,YAAAG,EAAA,GAA9CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GA+C1BG,EAAoB,GAC1B,IAAK,IAAI5D,KAAOsD,EACdM,EAAkB5E,KAAK,CACrB6E,GAAI7D,EACJ8D,OAAQR,EAAUtD,KAGtB,IAAI+D,EACF5E,IAAAC,cAAA,QAAM4E,SArDW,SAACC,GACpBA,EAAMC,iBAEN,IAAMC,EAAW,GACjB,IAAK,IAAIC,KAAyBd,EAChCa,EAASC,GAAyBd,EAChCc,GACAxE,MAEJ,IAAM8B,EAAQ,CACZb,YAAarC,EAAM6C,KACnBE,MAAO/C,EAAM+C,MACbS,UAAWmC,EACXtC,OAAQrD,EAAMqD,QAGhBrD,EAAMuD,cAAcL,EAAOlD,EAAMmD,SAsC5BiC,EAAkB9D,KAAI,SAACuE,GAAW,OACjClF,IAAAC,cAACc,IAAK,CACJF,IAAKqE,EAAYR,GACjB3E,YAAamF,EAAYP,OAAO5E,YAChCS,cAAe0E,EAAYP,OAAOnE,cAClCC,MAAOyE,EAAYP,OAAOlE,MAC1Bf,SAAUwF,EAAYP,OAAOpB,MAC7B5D,eAAgBuF,EAAYP,OAAOtB,WACnCzD,QAASsF,EAAYP,OAAO/E,QAC5BS,QAAS,SAACyE,GAAK,OA5CG,SAACA,EAAOK,GAClC,IAAMC,EAAqBC,YACzBlB,EAAUgB,GACV,CACE1E,MAAOqE,EAAMQ,OAAO7E,MACpB8C,MAAOgC,YACLT,EAAMQ,OAAO7E,MACb0D,EAAUgB,GAAiB9B,YAE7BzD,SAAS,IAIP4F,EAAmBH,YAAalB,EAASsB,YAAA,GAC5CN,EAAkBC,IAGjBb,GAAc,EAClB,IAAK,IAAIY,KAAmBK,EAC1BjB,EAAciB,EAAiBL,GAAiB5B,OAASgB,EAE3DH,EAAaoB,GACbhB,EAAeD,GAsBamB,CAAoBZ,EAAOI,EAAYR,UAG/D1E,IAAAC,cAAC0B,IAAM,CAACC,QAAQ,UAAU+D,UAAWpB,GAAa,UAQtD,OAHIlF,EAAMiD,UACRsC,EAAO5E,IAAAC,cAAC2F,IAAO,OAGf5F,IAAAC,cAAA,OAAKK,UAAWd,IAAOqG,aACrB7F,IAAAC,cAAA,UAAI,2BACH2E,KA0BuBkB,MC5JjB9D,uBAPS,SAACC,GACvB,MAAO,CACLC,KAAMD,EAAME,cAAcT,YAC1BqE,UAAW9D,EAAMM,MAAMwD,aAIZ/D,EAvCE,SAAA3C,GASE2G,IACf,GAAI3G,EAAM6C,KAAM,CACd,IAAM+D,EAAoB5G,EAAM0G,UAC9B/F,IAAAC,cAAC+F,IAAQ,CAACE,GAAG,MACX,KAeN,OAbIlG,IAAAC,cAAA,WACGgG,EACDjG,IAAAC,cAACoB,EAAe,CACdK,YAAarC,EAAM6C,KACnBiE,kBAlBuB,WAC/B9G,EAAM+G,QAAQC,UAkBNtE,kBAfuB,WAC/B1C,EAAM+G,QAAQE,QAAQ,6BAgBhBtG,IAAAC,cAACsG,IAAK,CACJC,KAAMnH,EAAMoH,MAAMD,KAAO,gBACzBE,UAAWb","file":"static/js/3.4572a95c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styles from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [styles.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(styles.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={styles.InputElement}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n  }\r\n  return (\r\n    <div className={styles.Input}>\r\n      <label className={styles.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3adf4\",\"Label\":\"Input_Label__3rBI4\",\"InputElement\":\"Input_InputElement__3psj1\",\"Invalid\":\"Input_Invalid__2ESin\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__1Kjnv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3rc_l\"};","import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport styles from './CheckoutSummary.module.css';\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className={styles.CheckoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button btnType=\"Danger\" clicked={props.checkoutCanceled}>CANCEL</Button>\r\n            <Button btnType=\"Success\" clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default checkoutSummary;","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport styles from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from \"../../../store/actions/index\";\r\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\r\n\r\nconst ContactData = props => {\r\n  const [orderForm, setOrderForm] = useState({\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Name\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      street: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Street\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      zipCode: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"ZIP Code\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5,\r\n          isNumeric: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      country: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Country\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your E-Mail\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      deliveryMethod: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"fastest\", displayValue: \"Fastest\" },\r\n            { value: \"cheapest\", displayValue: \"Cheapest\" },\r\n          ],\r\n        },\r\n        value: \"fastest\",\r\n        validation: {},\r\n        valid: true,\r\n      },\r\n    });\r\n  \r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  const orderHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = {};\r\n    for (let formElementIdentifier in orderForm) {\r\n      formData[formElementIdentifier] = orderForm[\r\n        formElementIdentifier\r\n      ].value;\r\n    }\r\n    const order = {\r\n      ingredients: props.ings,\r\n      price: props.price,\r\n      orderData: formData,\r\n      userId: props.userId,\r\n    };\r\n\r\n    props.onOrderBurger(order, props.token);\r\n  };\r\n\r\n  const inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(\r\n      orderForm[inputIdentifier],\r\n      {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          orderForm[inputIdentifier].validation\r\n        ),\r\n        touched: true,\r\n      }\r\n    );\r\n\r\n    const updatedOrderForm = updateObject(orderForm, {\r\n      [inputIdentifier]: updatedFormElement,\r\n    });\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n    setOrderForm(updatedOrderForm);\r\n    setFormIsValid(formIsValid);\r\n  };\r\n\r\n  \r\n    const formElementsArray = [];\r\n    for (let key in orderForm) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: orderForm[key],\r\n      });\r\n    }\r\n    let form = (\r\n      <form onSubmit={orderHandler}>\r\n        {formElementsArray.map((formElement) => (\r\n          <Input\r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={(event) => inputChangedHandler(event, formElement.id)}\r\n          />\r\n        ))}\r\n        <Button btnType=\"Success\" disabled={!formIsValid}>\r\n          ORDER\r\n        </Button>\r\n      </form>\r\n    );\r\n    if (props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    return (\r\n      <div className={styles.ContactData}>\r\n        <h4>Enter your Contact Data</h4>\r\n        {form}\r\n      </div>\r\n    );\r\n  \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.purchaseBurger(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\n\r\nconst Checkout = props => {\r\n  const checkoutCancelledHandler = () => {\r\n    props.history.goBack();\r\n  };\r\n\r\n  const checkoutContinuedHandler = () => {\r\n    props.history.replace(\"/checkout/contact-data\");\r\n  };\r\n\r\n    let summary = <Redirect to=\"/\" />;\r\n    if (props.ings) {\r\n      const purchasedRedirect = props.purchased ? (\r\n        <Redirect to=\"/\" />\r\n      ) : null;\r\n      summary = (\r\n        <div>\r\n          {purchasedRedirect}\r\n          <CheckoutSummary\r\n            ingredients={props.ings}\r\n            checkoutCancelled={checkoutCancelledHandler}\r\n            checkoutContinued={checkoutContinuedHandler}\r\n          />\r\n          <Route\r\n            path={props.match.path + \"/contact-data\"}\r\n            component={ContactData}\r\n          />\r\n        </div>\r\n      );\r\n    return summary;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n"],"sourceRoot":""}