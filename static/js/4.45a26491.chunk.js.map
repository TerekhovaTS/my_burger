{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","styles","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","React","createElement","Object","assign","onChange","changed","className","join","elementConfig","value","options","map","option","key","displayValue","Input","Label","label","module","exports","connect","state","loading","auth","error","isAuthenticated","token","burgerBuilder","building","authRedirectPath","dispatch","onAuth","email","password","isSignup","actions","onSetRedirectPath","_useState","useState","type","placeholder","validation","required","isEmail","valid","minLength","_useState2","_slicedToArray","controls","setControls","_useState3","_useState4","setIsSignup","useEffect","formElementsArray","id","config","form","formElement","event","controlName","updatedControls","updateObject","_defineProperty","target","checkValidity","inputChangedHandler","Spinner","errorMessage","message","authRedirect","Redirect","to","Auth","onSubmit","preventDefault","Button","btnType","clicked"],"mappings":"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","file":"static/js/4.45a26491.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styles from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [styles.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(styles.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={styles.InputElement}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n  }\r\n  return (\r\n    <div className={styles.Input}>\r\n      <label className={styles.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3adf4\",\"Label\":\"Input_Label__3rBI4\",\"InputElement\":\"Input_InputElement__3psj1\",\"Invalid\":\"Input_Invalid__2ESin\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2Y21s\"};","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { updateObject, checkValidity } from \"../../shared/utility\";\r\n\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport styles from \"./Auth.module.css\";\r\nimport * as actions from \"../../store/actions/index\";\r\n\r\nconst Auth = props => {\r\n  const [controls, setControls] = useState({\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Mail Address\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      }\r\n  });\r\n\r\n  const [isSignup, setIsSignup] = useState(true);\r\n  const {burgerBuilder, authRedirectPath, onSetRedirectPath} = props;\r\n\r\n  useEffect(() => {\r\n    if (!burgerBuilder && authRedirectPath !== \"/\") {\r\n      onSetRedirectPath();\r\n    }\r\n  }, [burgerBuilder, authRedirectPath, onSetRedirectPath]);\r\n\r\n  const inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(controls, {\r\n      [controlName]: updateObject(controls[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          controls[controlName].validation\r\n        ),\r\n        touched: true,\r\n      }),\r\n    });\r\n    setControls(updatedControls);\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    props.onAuth(\r\n      controls.email.value,\r\n      controls.password.value,\r\n      isSignup\r\n    );\r\n  };\r\n\r\n  const switchAuthModeHandler = () => {\r\n   setIsSignup(!isSignup);\r\n  };\r\n\r\n    const formElementsArray = [];\r\n    for (let key in controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: controls[key],\r\n      });\r\n    }\r\n\r\n    let form = formElementsArray.map((formElement) => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        invalid={!formElement.config.valid}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={(event) => inputChangedHandler(event, formElement.id)}\r\n      />\r\n    ));\r\n\r\n    if (props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    let errorMessage = null;\r\n\r\n    if (props.error) {\r\n      errorMessage = <p>{props.error.message}</p>;\r\n    }\r\n\r\n    let authRedirect = null;\r\n    if (props.isAuthenticated) {\r\n      authRedirect = <Redirect to={props.authRedirectPath} />;\r\n    }\r\n\r\n    return (\r\n      <div className={styles.Auth}>\r\n        {authRedirect}\r\n        {errorMessage}\r\n        <form onSubmit={submitHandler}>\r\n          {form}\r\n          <Button btnType=\"Success\">SUBMIT</Button>\r\n        </form>\r\n        <Button clicked={switchAuthModeHandler} btnType=\"Danger\">\r\n          SWITCH TO {isSignup ? \"SIGNIN\" : \"SIGNUP\"}\r\n        </Button>\r\n      </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    burgerBuilder: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n    onSetRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\")),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}